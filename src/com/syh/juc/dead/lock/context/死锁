问题1：死锁是什么？
问题2：写一个死锁的小demo？
问题3：怎么解决死锁？

1、死锁
    1.1 定义：死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力干涉，那
        它们都将无法推进下去。如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会
        因争夺有限的资源而陷入死锁。

    1.2 现实例子：在一个CPU中，进行任务调用，有两个任务，但是CPU的资源不够充足，同一个时间只能有一个任务进行，
        当A任务抢夺了CPU的一部分资源，该资源不足以使A任务执行；而此时B任务获得剩下的CPU资源，这些资源也不足以
        进行B任务的执行，那么就出现AB都在等待对方释放资源，于是陷入了无限等待的情况，这就是死锁。

    1.3 造成死锁的主要原因：
        系统资源不足；
        进程运行推进的顺序不合适
        资源分配不当

    1.4 怎么查看线程造成了死锁？
        1.4.1 使用Terminal
        1.4.2 jps -l    查看执行类的进程号
        1.4.3 jstack 进程号    得到报障报告
        1.4.4 发现
            线程threadBBB持有锁<0x000000076b621170>，等待锁<0x000000076b621138>
            线程threadAAA持有锁<0x000000076b621138>，等待锁<0x000000076b621170>
            所以两个线程造成了死锁。

            "threadBBB":
                    at com.hsy.dead.lock.context.HoldLockThread.run(DeadLockDemo
            .java:47)
                    - waiting to lock <0x000000076b621138> (a java.lang.String)
                    - locked <0x000000076b621170> (a java.lang.String)
                    at java.lang.Thread.run(Thread.java:748)
            "threadAAA":
                    at com.hsy.dead.lock.context.HoldLockThread.run(DeadLockDemo
            .java:47)
                    - waiting to lock <0x000000076b621170> (a java.lang.String)
                    - locked <0x000000076b621138> (a java.lang.String)
                    at java.lang.Thread.run(Thread.java:748)
            Found 1 deadlock.


