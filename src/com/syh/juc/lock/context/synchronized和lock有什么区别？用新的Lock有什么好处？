synchonized和Lock的区别
1、原始构成
    1.1 synchonized是关键字，属于JVM层面
          monitorenter(底层是通过monitor对象来完成，其实wait/notify等方法也依赖于monitor对象，
              只有在同步块或方法中才能调wait/notify等方法)
          monitorexit
    1.2 Lock是具体类（java.util.concurrent.locks.Lock）是API层面的锁

2、使用方法
    2.1 synchonized不会造成死锁，因为它有正常退出（monitorexit）和异常退出机制(monitorexit)，
        不需要用户去手动释放锁，当synchonized代码执行完后系统会自动让线程释放对锁的占用
    2.2 ReentrantLock需要用户去手动释放锁，若没有主动释放锁，就有可能出现死锁现象

3、等待是否可中断
    3.1 synchonized不可中断，除非抛出异常或者正常运行完成
    3.2 ReentrantLock可中断
        3.2.1 设置超时方法 tryLock(Long timeout, TimeUnit unit)
        3.2.2 lockInterrutibly()放代码块中，调用interrupt()方法可中断

4、加锁是否公平
    4.1 synchonized非公平锁
    4.2 ReentrantLock两者都可以，默认非公平锁，构造方法可以传入boolean值，为true是公平锁，false为非公平锁

5、锁绑定多个条件Condition
    5.1 synchonized没有
    5.2 ReentrantLock用来实现分组唤醒需要唤醒的线程们，可以精确唤醒，而不是像synchonized要么随机唤醒一个线程，
        要么唤醒所有线程

