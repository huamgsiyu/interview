问题：阻塞队列知道吗？

1、队列+阻塞队列
    1.1 队列
        先进先出（FIFO）

    1.2 阻塞队列（生产者消费者模式）
        1.1.1 当阻塞队列是空时，从队列中 获取 元素的操作将会被阻塞；
              当阻塞队列是满时，往队列里 添加 元素的操作将会被阻塞；
        1.1.2 阻塞队列有没有好的一面?

        1.1.3 不得不阻塞，你如何管理?

2、为什么用？有什么好处？
    2.1 在多线程领域：所谓阻塞，就是在某些情况下会 挂起 线程（即阻塞），一旦
        条件满足，被挂起的线程又会自动被唤醒

    2.2 为什么需要BlockingQueue
        好处是我们不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为
            这一切BlockingQueue都给你一手包办了

    2.3 在concurrent包发布以前，在多线程环境下，我们每个程序猿都必须去控制这
        些细节，尤其还要兼顾效率和线程安全，而这会给我们的程序带来不小的复杂
        读。
3、BlockingQueue的核心方法
    3.1 抛出异常组：add(e)/remove()/element()

    3.2 特殊值：offer(e)/poll()/peek()

    3.3 阻塞：put(e)/take()

    3.4 offer(e,time,unit)/poll(time,unit)

4、架构梳理+种类分析
    4.1 构架分析
        4.1.1

    4.2 种类分析
        ArrayBlockingQueue:由数组结构组成的有界阻塞队列。
        LinkedBlockingQueue:由链表结构组成的有界（但大小默认值为Inter.MAX_VALUE约等于12亿）阻塞队列。
        SynchronousQueue:不存储元素的阻塞队列，也即单个元素的队列。只能保存一个元素，生产了一个，不被消费，就不在生产；如果消费了，马上又生产一个。

        PriorityBlockingQueue:支持优先级排序的无界阻塞队列。
        DelayQueue:使用优先级队列实现的延迟无界阻塞队列。
        LinkedTransferQueue:由链表结构组成的无界阻塞队列。
        LinkedBlockingDeque:由链表结构组成的双向阻塞队列。
5、用在哪里



