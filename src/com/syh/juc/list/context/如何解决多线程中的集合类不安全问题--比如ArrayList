比如List<String> list = new ArrayList<>();
Set<String> set = new HashSet<>();
Map<String, String> map = new HashMap<>();

1、故障现象
java.util.ConcurrentModificationExcption

2、故障原因
线程1正在修改集合中的数据，在这个时候线程2抢夺了公共的资源，导致了线程修改异常

3、解决方法(以List为例，举一反三)
3.1 new Vector();
3.2 Collections.sychronizedList(new ArrayList<>());
3.3 new CopyWriteArrayList();写时复制，最好方案
写时复制：CopyOnWrite容器就是写时复制的容器，往一个容器添加元素的时候，不直接往当前容器Object[]添加，而是先将当前容器的object[]进行copy，复制出一个新的容器object[] newElements，然后新的容器Object[] newElement里添加元素，添加完元素之后，再将原容器的引用指向新的容器 setArray(new Elements)；这样做的好处是可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。

4、优化建议

